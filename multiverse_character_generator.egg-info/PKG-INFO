Metadata-Version: 2.4
Name: multiverse-character-generator
Version: 1.0.0
Summary: Generate fictional characters across multiple universes using GPT-2
Home-page: https://github.com/multiverse-character-generator/multiverse-character-generator
Author: Multiverse Character Generator Team
Author-email: Multiverse Character Generator Team <contact@example.com>
Maintainer-email: Multiverse Character Generator Team <contact@example.com>
License: MIT
Project-URL: Homepage, https://github.com/your-username/multiverse-character-generator
Project-URL: Documentation, https://your-username.github.io/multiverse-character-generator
Project-URL: Repository, https://github.com/your-username/multiverse-character-generator.git
Project-URL: Issues, https://github.com/your-username/multiverse-character-generator/issues
Project-URL: Changelog, https://github.com/your-username/multiverse-character-generator/blob/main/CHANGELOG.md
Keywords: character-generation,gpt2,fiction,fantasy,sci-fi,horror,cyberpunk,anime,marvel,nlp,machine-learning
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Games/Entertainment :: Role-Playing
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Text Processing :: Linguistic
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=1.9.0
Requires-Dist: transformers>=4.20.0
Requires-Dist: pydantic>=1.8.0
Requires-Dist: nltk>=3.6
Requires-Dist: numpy>=1.21.0
Requires-Dist: tokenizers>=0.12.0
Requires-Dist: setuptools>=75.3.2
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0.0; extra == "docs"
Requires-Dist: myst-parser>=0.17.0; extra == "docs"
Provides-Extra: web
Requires-Dist: fastapi>=0.68.0; extra == "web"
Requires-Dist: uvicorn>=0.15.0; extra == "web"
Requires-Dist: flask>=2.0.0; extra == "web"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: platform
Dynamic: requires-python

# Multiverse Character Generator

Uma biblioteca Python poderosa para gerar personagens ficcionais detalhados em m√∫ltiplos universos usando GPT-2. Crie personagens convincentes para universos de fantasia, fic√ß√£o cient√≠fica, terror, cyberpunk, anime e Marvel com par√¢metros customiz√°veis e engenharia inteligente de prompts.

## Caracter√≠sticas

- üåü **M√∫ltiplos Universos**: Suporte para 6 universos ficcionais distintos
- üéØ **Gera√ß√£o Customiz√°vel**: Ajuste fino de temperatura, comprimento e outros par√¢metros
- ‚ö° **Suporte Async**: Interfaces s√≠ncronas e ass√≠ncronas
- üíæ **Opera√ß√µes de Arquivo**: Salve personagens em arquivos com sa√≠da formatada
- üõ°Ô∏è **Tratamento de Erros**: Tratamento abrangente de erros e valida√ß√£o
- üéÆ **Integra√ß√£o F√°cil**: API simples para integra√ß√£o em jogos, aplicativos e ferramentas
- üöÄ **Acelera√ß√£o GPU**: Detec√ß√£o e uso autom√°tico de GPU

## Universos Suportados

| Universo | Detalhes Obrigat√≥rios | Exemplo |
|----------|----------------------|---------|
| **Fantasia** | Ra√ßa, Classe, Alinhamento, Reino de Origem | Elfo Mago da Floresta M√≠stica |
| **Sci-Fi** | Esp√©cie, Profiss√£o, Afilia√ß√£o, Planeta Natal | Piloto Ciborgue de Proxima Centauri |
| **Terror** | Ocupa√ß√£o, Fobia, Rel√≠quia Amaldi√ßoada, Local Assombrado | Jornalista com medo de aranhas |
| **Cyberpunk** | Implantes Cibern√©ticos, Afilia√ß√£o Corporativa, Especializa√ß√£o Criminal, Distrito Urbano | Netrunner com bra√ßos bi√¥nicos |
| **Anime** | Tipo de Personagem, Habilidade √önica, Backstory, Objetivo | Protagonista shonen buscando vingan√ßa |
| **Marvel** | Origem do Poder, Afilia√ß√£o, Arqu√©tipo, Localiza√ß√£o | Her√≥i mutante de Nova York |

## Instala√ß√£o

### Depend√™ncias

```bash
pip install torch transformers pydantic nltk numpy tokenizers

# Para desenvolvimento e testes
pip install pytest pytest-asyncio

# Opcional: Para suporte a GPU (CUDA)
pip install torch[cu118] transformers
```

### Instala√ß√£o da Biblioteca

```bash
# Clone o reposit√≥rio
git clone https://github.com/your-username/multiverse-character-generator.git
cd multiverse-character-generator

# Instale em modo de desenvolvimento
pip install -e .

# Ou instale usando setup.py
python setup.py install
```

## In√≠cio R√°pido

### Uso B√°sico

```python
from multiverse_character_generator import MultiverseCharacterGenerator

# Inicializar o gerador
generator = MultiverseCharacterGenerator()

# Gerar um personagem de fantasia
character = generator.generate_character(
    universe="fantasia",
    details=["Halfling", "Ladino", "Neutro Ca√≥tico", "Cidade Ribeirinha"]
)

print(character.character)
```

### Gera√ß√£o R√°pida

```python
# Usar exemplos pr√©-definidos para gera√ß√£o r√°pida
character = generator.quick_generate("cyberpunk")
print(character.character)
```

### Gera√ß√£o Ass√≠ncrona

```python
import asyncio

async def generate_multiple():
    # Gerar m√∫ltiplos personagens concorrentemente
    tasks = [
        generator.generate_character_async("fantasia", ["Elfo", "Mago", "Lawful Good", "Floresta Antiga"]),
        generator.generate_character_async("sci-fi", ["Humano", "Engenheiro", "Federa√ß√£o", "Esta√ß√£o Espacial"]),
        generator.generate_character_async("anime", ["Estudante", "Magia de Fogo", "Vila Destru√≠da", "Tornar-se Her√≥i"])
    ]
    
    characters = await asyncio.gather(*tasks)
    return characters

# Executar
characters = asyncio.run(generate_multiple())
```

### Salvando em Arquivo

```python
# Salvar personagem em arquivo
character = generator.generate_character(
    universe="terror",
    details=["M√©dico", "Claustrofobia", "Kit M√©dico", "Hospital Abandonado"],
    save_to_file=True,
    output_dir="./personagens"
)

print(f"Personagem salvo em: {character.filename}")
```

## Documenta√ß√£o da API

### Classe Principal: MultiverseCharacterGenerator

#### Inicializa√ß√£o

```python
generator = MultiverseCharacterGenerator(
    model_name="gpt2-medium",  # Modelo GPT-2 a usar
    use_gpu=None,              # Auto-detectar GPU (None) ou for√ßar CPU/GPU (bool)
    cache_dir=None             # Diret√≥rio para cache de modelos
)
```

**Par√¢metros:**
- `model_name` (str): Nome do modelo GPT-2. Op√ß√µes: "gpt2", "gpt2-medium", "gpt2-large", "gpt2-xl"
- `use_gpu` (Optional[bool]): Se deve usar GPU. None para auto-detec√ß√£o
- `cache_dir` (Optional[str]): Diret√≥rio para armazenar modelos em cache

#### M√©todos Principais

##### `generate_character()`

Gera um personagem com detalhes customizados.

```python
character = generator.generate_character(
    universe="fantasia",
    details=["Elfo", "Ranger", "Neutro", "Floresta Prateada"],
    max_length=350,
    temperature=0.85,
    top_p=0.92,
    repetition_penalty=1.2,
    save_to_file=False,
    output_dir=None
)
```

**Par√¢metros:**
- `universe` (str): Universo fict√≠cio ("fantasia", "sci-fi", "terror", "cyberpunk", "anime", "marvel")
- `details` (List[str]): Lista de detalhes do personagem correspondentes aos requisitos do universo
- `max_length` (int): Comprimento m√°ximo do texto gerado (50-1000)
- `temperature` (float): Temperatura de amostragem (0.0-1.0) - controla criatividade
- `top_p` (float): Par√¢metro de amostragem nucleus (0.0-1.0)
- `repetition_penalty` (float): Penalidade por repeti√ß√£o (1.0-2.0)
- `save_to_file` (bool): Se deve salvar em arquivo
- `output_dir` (Optional[str]): Diret√≥rio para salvar arquivos

**Retorna:** `GeneratedCharacter` com texto do personagem e nome do arquivo (se salvo)

##### `quick_generate()`

Gera um personagem usando exemplos pr√©-definidos.

```python
character = generator.quick_generate(
    universe="cyberpunk",
    max_length=300,
    temperature=0.8
)
```

##### `generate_character_async()` e `quick_generate_async()`

Vers√µes ass√≠ncronas dos m√©todos acima para gera√ß√£o concorrente.

##### M√©todos Utilit√°rios

```python
# Listar universos dispon√≠veis
universes = generator.list_universes()

# Obter informa√ß√µes sobre um universo
info = generator.get_universe_info("fantasia")

# Obter informa√ß√µes do modelo
model_info = generator.get_model_info()
```

### Modelos de Dados

#### CharacterDetails

```python
from multiverse_character_generator.models import CharacterDetails

details = CharacterDetails(
    universe="fantasia",
    details=["Elfo", "Mago", "Lawful Good", "Torre Arcana"]
)
```

#### GeneratedCharacter

```python
from multiverse_character_generator.models import GeneratedCharacter

character = GeneratedCharacter(
    character="Descri√ß√£o detalhada do personagem...",
    filename="character_elfo_mago_20241207.txt"  # Opcional
)
```

### Tratamento de Erros

A biblioteca fornece exce√ß√µes espec√≠ficas para diferentes tipos de erro:

```python
from multiverse_character_generator.exceptions import (
    InvalidUniverseError,
    InvalidDetailsError,
    GenerationError,
    ModelInitializationError
)

try:
    character = generator.generate_character("universo_invalido", ["detalhe"])
except InvalidUniverseError as e:
    print(f"Universo inv√°lido: {e}")
except InvalidDetailsError as e:
    print(f"Detalhes inv√°lidos: {e}")
except GenerationError as e:
    print(f"Erro na gera√ß√£o: {e}")
```

## Configura√ß√£o de Universos

### Fantasia

**Campos obrigat√≥rios:** Ra√ßa, Classe, Alinhamento, Reino de Origem

```python
character = generator.generate_character(
    universe="fantasia",
    details=["Half-Orc", "Paladino", "Lawful Good", "Bosque Sagrado"]
)
```

### Fic√ß√£o Cient√≠fica

**Campos obrigat√≥rios:** Esp√©cie, Profiss√£o, Afilia√ß√£o, Planeta Natal

```python
character = generator.generate_character(
    universe="sci-fi",
    details=["Sint√©tico", "Arque√≥logo", "Independente", "Nave Antiga"]
)
```

### Terror

**Campos obrigat√≥rios:** Ocupa√ß√£o, Fobia, Rel√≠quia Amaldi√ßoada, Local Assombrado

```python
character = generator.generate_character(
    universe="terror",
    details=["Curador", "Tripofobia", "M√°scara Ritual", "Museu Subterr√¢neo"]
)
```

### Cyberpunk

**Campos obrigat√≥rios:** Implantes Cibern√©ticos, Afilia√ß√£o Corporativa/Gangue, Especializa√ß√£o Criminal, Distrito Urbano

```python
character = generator.generate_character(
    universe="cyberpunk",
    details=["Interface Neural", "Corretor de Informa√ß√µes", "Rede Sombria", "Porto de Dados"]
)
```

### Anime

**Campos obrigat√≥rios:** Tipo de Personagem, Habilidade √önica, Backstory, Objetivo

```python
character = generator.generate_character(
    universe="anime",
    details=["Mestre da Espada", "Estilo Rel√¢mpago", "Mestre Morto", "Buscar Verdade"]
)
```

### Marvel

**Campos obrigat√≥rios:** Origem do Poder, Afilia√ß√£o, Arqu√©tipo, Localiza√ß√£o

```python
character = generator.generate_character(
    universe="marvel",
    details=["Poderes Magn√©ticos", "Irmandade", "Anti-Her√≥i", "Cidade Industrial"]
)
```

## Configura√ß√µes Avan√ßadas

### Otimiza√ß√£o de Par√¢metros por Universo

Diferentes universos se beneficiam de configura√ß√µes espec√≠ficas:

```python
# Configura√ß√µes otimizadas para fantasia
fantasy_config = {
    "temperature": 0.8,
    "top_p": 0.9,
    "repetition_penalty": 1.2,
    "max_length": 350
}

# Configura√ß√µes otimizadas para cyberpunk
cyberpunk_config = {
    "temperature": 0.85,
    "top_p": 0.92,
    "repetition_penalty": 1.4,
    "max_length": 320
}

character = generator.generate_character(
    universe="fantasia",
    details=["Tiefling", "Bardo", "Chaotic Neutral", "Taverna"],
    **fantasy_config
)
```

### Controle de Criatividade

```python
# Mais conservador (previs√≠vel)
conservative = generator.generate_character(
    universe="anime",
    details=["Piloto Mecha", "Poderes Ps√≠quicos", "Col√¥nia Destru√≠da", "Lutar Aliens"],
    temperature=0.3,
    top_p=0.7
)

# Mais criativo (diverso)
creative = generator.generate_character(
    universe="anime",
    details=["Piloto Mecha", "Poderes Ps√≠quicos", "Col√¥nia Destru√≠da", "Lutar Aliens"],
    temperature=1.0,
    top_p=0.95
)
```

### Processamento em Lote

```python
import asyncio

async def batch_generation():
    requests = [
        ("fantasia", ["Orc", "Guerreiro", "Chaotic Evil", "Montanhas Sombrias"]),
        ("sci-fi", ["Rob√¥", "M√©dico", "Marinha Espacial", "Nave M√©dica"]),
        ("cyberpunk", ["Implante Neural", "Courier de Dados", "Freelancer", "Subterr√¢neo"])
    ]
    
    tasks = [
        generator.generate_character_async(universe, details, max_length=200)
        for universe, details in requests
    ]
    
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    successful = [r for r in results if not isinstance(r, Exception)]
    print(f"Gerados {len(successful)} de {len(requests)} personagens")
    
    return successful

characters = asyncio.run(batch_generation())
```

## Exemplos de Uso

### Integra√ß√£o em Jogos

```python
class GameCharacterGenerator:
    def __init__(self):
        self.generator = MultiverseCharacterGenerator(model_name="gpt2")
    
    def create_npc(self, universe_type, player_level):
        # Gerar NPC baseado no n√≠vel do jogador
        if player_level < 5:
            length = 150  # Descri√ß√£o mais curta para NPCs menores
        else:
            length = 300  # Descri√ß√£o detalhada para NPCs importantes
        
        character = self.generator.quick_generate(
            universe=universe_type,
            max_length=length,
            temperature=0.8
        )
        
        return character.character

# Uso no jogo
game_gen = GameCharacterGenerator()
tavern_keeper = game_gen.create_npc("fantasia", player_level=3)
```

### Sistema de Campanha de RPG

```python
class CampaignManager:
    def __init__(self):
        self.generator = MultiverseCharacterGenerator()
        self.campaign_characters = []
    
    async def generate_party(self, universe, party_configs):
        """Gerar grupo de personagens para campanha"""
        tasks = [
            self.generator.generate_character_async(
                universe=universe,
                details=config["details"],
                save_to_file=True,
                output_dir=f"./campaigns/{universe}/party"
            )
            for config in party_configs
        ]
        
        party = await asyncio.gather(*tasks)
        self.campaign_characters.extend(party)
        return party
    
    def save_campaign(self, campaign_name):
        """Salvar todos os personagens da campanha"""
        # Implementar salvamento de campanha
        pass

# Exemplo de uso
manager = CampaignManager()

party_configs = [
    {"details": ["Elfo", "Ranger", "Chaotic Good", "Floresta Ancestral"]},
    {"details": ["An√£o", "Cl√©rigo", "Lawful Good", "Montanha Sagrada"]},
    {"details": ["Humano", "Ladino", "Chaotic Neutral", "Cidade Portu√°ria"]}
]

party = asyncio.run(manager.generate_party("fantasia", party_configs))
```

### Ferramenta de Escrita Criativa

```python
class StoryWriter:
    def __init__(self):
        self.generator = MultiverseCharacterGenerator()
    
    def create_character_profiles(self, story_universe, num_characters=3):
        """Criar perfis de personagens para uma hist√≥ria"""
        characters = []
        
        for i in range(num_characters):
            character = self.generator.quick_generate(
                universe=story_universe,
                temperature=0.9,  # Mais criativo para escrita
                max_length=400
            )
            characters.append({
                "id": f"character_{i+1}",
                "profile": character.character,
                "universe": story_universe
            })
        
        return characters
    
    def generate_character_interactions(self, char1_details, char2_details, universe):
        """Gerar intera√ß√µes entre personagens"""
        # Implementar l√≥gica de intera√ß√£o
        pass

# Uso para escrita
writer = StoryWriter()
story_characters = writer.create_character_profiles("cyberpunk", 5)

for char in story_characters:
    print(f"\n{char['id'].upper()}:")
    print(char['profile'][:200] + "...")
```

## Testes

### Executar Testes

```bash
# Executar todos os testes
pytest

# Executar testes espec√≠ficos
pytest tests/test_generator.py

# Executar testes com cobertura
pytest --cov=multiverse_character_generator

# Executar testes ass√≠ncronos
pytest -m asyncio
```

### Testes Customizados

```python
import pytest
from multiverse_character_generator import MultiverseCharacterGenerator

def test_custom_universe():
    generator = MultiverseCharacterGenerator(model_name="gpt2")
    
    # Testar gera√ß√£o para todos os universos
    universes = generator.list_universes()
    assert len(universes) == 6
    
    for universe in universes:
        character = generator.quick_generate(universe, max_length=100)
        assert len(character.character) > 0
        assert isinstance(character.character, str)
```

## Solu√ß√£o de Problemas

### Problemas Comuns

#### Erro de Mem√≥ria GPU

```python
# For√ßar uso da CPU se GPU n√£o tiver mem√≥ria suficiente
generator = MultiverseCharacterGenerator(use_gpu=False)
```

#### Modelo n√£o Encontrado

```bash
# Verificar se os modelos est√£o instalados
python -c "from transformers import AutoModel; AutoModel.from_pretrained('gpt2')"
```

#### Depend√™ncias em Falta

```bash
# Instalar todas as depend√™ncias necess√°rias
pip install torch transformers pydantic nltk numpy tokenizers
```

### Configura√ß√£o de Log

```python
import logging
from multiverse_character_generator.utils import setup_logging

# Configurar logging detalhado
logger = setup_logging(level="DEBUG", log_file="generation.log")
```

### Otimiza√ß√£o de Performance

```python
# Para gera√ß√£o mais r√°pida
fast_generator = MultiverseCharacterGenerator(
    model_name="gpt2",  # Modelo menor
    use_gpu=True        # Usar GPU se dispon√≠vel
)

# Configura√ß√µes para velocidade
speed_config = {
    "max_length": 150,
    "temperature": 0.5,
    "top_p": 0.8
}
```

## Contribui√ß√£o

### Desenvolvendo

```bash
# Clonar reposit√≥rio
git clone https://github.com/your-username/multiverse-character-generator.git
cd multiverse-character-generator

# Criar ambiente virtual
python -m venv venv
source venv/bin/activate  # Linux/Mac
# venv\Scripts\activate   # Windows

# Instalar depend√™ncias de desenvolvimento
pip install -e ".[dev]"

# Executar testes
pytest

# Verificar c√≥digo
flake8 multiverse_character_generator/
mypy multiverse_character_generator/
```

### Adicionando Novos Universos

Para adicionar um novo universo, edite `multiverse_character_generator/universes.py`:

```python
def get_universes():
    universes = {
        # ... universos existentes ...
        
        "novo_universo": {
            "inputs": ["Campo1", "Campo2", "Campo3"],
            "exemplos": ["Exemplo1", "Exemplo2", "Exemplo3"]
        }
    }
    
    # Adicionar template de prompt
    templates["novo_universo"] = (
        "Crie um personagem de novo universo com:\n"
        "- Campo1: {0}\n- Campo2: {1}\n- Campo3: {2}\n"
        "Inclua caracter√≠sticas espec√≠ficas do universo."
    )
```

## Licen√ßa

Este projeto est√° licenciado sob a Licen√ßa MIT. Veja o arquivo `LICENSE` para mais detalhes.

## Suporte

- **Issues**: [GitHub Issues](https://github.com/your-username/multiverse-character-generator/issues)
- **Documenta√ß√£o**: Este README e coment√°rios no c√≥digo
- **Exemplos**: Pasta `examples/` com scripts demonstrativos

## Changelog

### v1.0.0
- Implementa√ß√£o inicial
- Suporte para 6 universos ficcionais
- Gera√ß√£o s√≠ncrona e ass√≠ncrona
- Sistema de valida√ß√£o completo
- Tratamento abrangente de erros
- Documenta√ß√£o completa
